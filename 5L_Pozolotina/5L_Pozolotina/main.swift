//
//  main.swift
//  5L_Pozolotina
//
//  Created by angelina on 02.03.2022.
//

import Foundation

//1. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª ¬´Car¬ª –∏ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞, –æ–±—â–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –∞ —Ç–∞–∫–∂–µ –º–µ—Ç–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è.
//
//2. –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ ¬´Car¬ª –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –Ω–∏—Ö –º–µ—Ç–æ–¥—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º: –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ, –∑–∞–ø—É—Å—Ç–∏—Ç—å/–∑–∞–≥–ª—É—à–∏—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å –∏ —Ç.–¥. (–ø–æ –æ–¥–Ω–æ–º—É –º–µ—Ç–æ–¥—É –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ, —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å–ª–µ–¥—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π).
//
//3. –°–æ–∑–¥–∞—Ç—å –¥–≤–∞ –∫–ª–∞—Å—Å–∞, –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª ¬´Car¬ª - trunkCar –∏ sport–°ar. –û–ø–∏—Å–∞—Ç—å –≤ –Ω–∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞, –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ —Ü–∏—Å—Ç–µ—Ä–Ω—ã.
//
//4. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä—É—é—â–µ–µ –ø—Ä–æ—Ç–æ–∫–æ–ª CustomStringConvertible.
//
//5. –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –Ω–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
//
//6. –í—ã–≤–µ—Å—Ç–∏ —Å–∞–º–∏ –æ–±—ä–µ–∫—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å.

enum Action {
    case switchEngine(Engine)
    case switchWindow(Window)
    case switchTrunk(TrunkState)
    case loadCargo(Int)     //–¥–æ–±–∞–≤–ª—è–µ—Ç –≥—Ä—É–∑
    case replaceTyres
    case unloadCargo(Int)   //—É–±–∞–≤–ª—è–µ—Ç –≥—Ä—É–∑
}

enum Window: CustomStringConvertible {
    case open, closed
    
    var description: String {
        switch self {
        case .open:
            return "–û–∫–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã"
        case .closed:
            return "–û–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã"
        }
    }
}

enum Engine: CustomStringConvertible {
    case on, off
    
    var description: String {
        switch self {
        case .on:
            return "–î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–≤–µ–¥—ë–Ω"
        case .off:
            return "–î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–≥–ª—É—à–µ–Ω"
        }
    }
}

enum TrunkState: CustomStringConvertible {
    case withTrunk, withoutTrunk
    
    var description: String {
        switch self {
        case .withTrunk:
            return "–¶–∏—Å—Ç–µ—Ä–Ω–∞ –ø–æ–¥—Å–æ–µ–¥–∏–Ω–µ–Ω–∞"
        case .withoutTrunk:
            return "–¶–∏—Å—Ç–µ—Ä–Ω–∞ –æ—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–∞"
        }
    }
}

protocol Car {
    var brand: String { get }
    var year: Int { get }
    var window: Window { get set }
    var engine: Engine { get set }
    func metod(action: Action)
    
}

extension Car {
    mutating func windowState(window: Window){
        self.window = window
    }
    mutating func engineState(engine: Engine){
        self.engine = engine
    }
}

class sport–°ar: Car, CustomStringConvertible {
    
    func metod(action: Action) {
        switch action {
        case .switchEngine(let status):
            engine = status
        case .switchWindow(let status):
            window = status
        case .replaceTyres:
            print("–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∑–∞–º–µ–Ω–∞ —à–∏–Ω!")
        default:
            break
        }
    }
    
    let simbol: String = "üèé"
    var maxSpeed: Double
    
    init(maxSpeed: Double, brand: String, year: Int, window: Window, engine: Engine) {
        self.maxSpeed = maxSpeed
        self.brand = brand
        self.year = year
        self.window = window
        self.engine = engine
    }
    
    let brand: String
    let year: Int
    var window: Window
    var engine: Engine
    
    var description: String {
        return "\(simbol) \(brand)\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: \(year)\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: \(maxSpeed)\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: \(engine) | \(window)\n"
    }
}

class trunkCar: Car, CustomStringConvertible {
    
    func metod(action: Action) {
        switch action {
        case .switchEngine(let status):
            engine = status
        case .switchWindow(let status):
            window = status
        case .switchTrunk(let status):
            if status == .withoutTrunk {
                maxTrunkSize = 0
                currentTrunkSize = 0
            } else {
                print("–ó–∞–¥–∞–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ü–∏—Å—Ç–µ—Ä–Ω—ã")
            }
            trunkState = status
        case .loadCargo(let load):
            guard trunkState != .withoutTrunk else{
                return
            }
            let expectedLoad = load + currentTrunkSize
            switch expectedLoad {
            case _ where expectedLoad > maxTrunkSize:
                currentTrunkSize = maxTrunkSize
            case _ where expectedLoad < 0:
                currentTrunkSize = 0
            default:
                currentTrunkSize += load
            }
        case .unloadCargo(let load):
            guard trunkState != .withoutTrunk else{
                return
            }
            switch load {
            case _ where load > currentTrunkSize:
                currentTrunkSize = 0
            default:
                currentTrunkSize -= load
            }
        default:
            break
        }
    }
    
    func trailer(){
        if trunkState == .withoutTrunk {
            maxTrunkSize = 0
        }
    }
    
    let simbol = "üöõ"
    let brand: String
    let year: Int
    var window: Window
    var engine: Engine
    var trunkState: TrunkState
    var maxTrunkSize: Int
    var currentTrunkSize: Int = 0
    init(brand: String, year: Int, window: Window, engine: Engine, trunkState: TrunkState, maxTrunkSize: Int) {
        self.trunkState = trunkState
        self.brand = brand
        self.year = year
        self.window = window
        self.engine = engine
        self.maxTrunkSize = maxTrunkSize
        trailer()
    }
    
    var description: String {
        return "\(simbol) \(brand)\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: \(year)\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: \(engine) | \(window) | \(trunkState)\n–ó–∞–ø–æ–ª–Ω–µ–Ω: \(currentTrunkSize)/\(maxTrunkSize)\n"
    }
}


var car1 = sport–°ar(maxSpeed: 340, brand: "Nod", year: 2010, window: .open, engine: .off)
car1.engineState(engine: .on)
print(car1)
car1.metod(action: .switchEngine(.on))
print(car1.engine)
car1.engineState(engine: .off)
print(car1)
car1.metod(action: .replaceTyres)


var trunk1 = trunkCar(brand: "Ford", year: 2019, window: .closed, engine: .off, trunkState: .withoutTrunk, maxTrunkSize: 200)
trunk1.metod(action: .switchTrunk(.withTrunk))
trunk1.maxTrunkSize = 300
trunk1.metod(action: .loadCargo(240))
//trunk1.metod(action: .switchTrunk(.withoutTrunk))
trunk1.metod(action: .unloadCargo(100))
print(trunk1)
trunk1.engineState(engine: .on)
print(trunk1.engine)
